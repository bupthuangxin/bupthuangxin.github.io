<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[黄鑫's blog]]></title>
  <subtitle><![CDATA[Walk steps step by step]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-13T14:57:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Huang xin]]></name>
    <email><![CDATA[308071066@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[servlet生命周期及web.xml配置]]></title>
    <link href="http://yoursite.com/2016/03/13/servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8Aweb.xml%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/03/13/servlet生命周期及web.xml配置/</id>
    <published>2016-03-13T14:32:02.000Z</published>
    <updated>2016-03-13T14:57:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Servlet_u5DE5_u4F5C_u539F_u7406"><a href="#Servlet_u5DE5_u4F5C_u539F_u7406" class="headerlink" title="Servlet工作原理"></a><strong>Servlet工作原理</strong></h2><ul>
<li>浏览器向web服务器发送http请求</li>
<li>web服务器解析主机地址，解析webapps，解析资源名，向web.xml查询servlet位置</li>
<li>web服务器创建HttpServletRequest对象，将http请求封装在里面</li>
<li>web服务器创建HttpServletResponse对象</li>
<li>创建servlet实例，第一调用时执行init()，只执行一次，之后调用doGet()和doPost()方法</li>
<li>HttpServlet调用doGet()和doPost()的HttpServletRequest的有关方法获取http请求</li>
<li>HttpServlet调用doGet()和doPost()的HttpServletResponse的有关方法生成响应数据</li>
<li>web服务器将HttpServletResponse对象分解为http请求</li>
<li>浏览器接收http请求</li>
<li>destroy()方法也只调用一次，当reload，关闭tomcat或者关机等时</li>
</ul>
<h2 id="web-xml_u914D_u7F6E"><a href="#web-xml_u914D_u7F6E" class="headerlink" title="web.xml配置"></a><strong>web.xml配置</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Servlet名字<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>此servlet全路径<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>vision<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>1.0<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Servlet名字<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/Servlet名字<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-_u81EA_u52A8_u521D_u59CB_u5316"><a href="#1-_u81EA_u52A8_u521D_u59CB_u5316" class="headerlink" title="1.自动初始化"></a>1.自动初始化</h3><p>当配置中无<code>&lt;load-on-startup&gt;&lt;/load-on-startup&gt;</code>时，只有第一次访问此servlet时才会实例化并调用init()方法，当配置了<code>&lt;load-on-startup&gt;&lt;/load-on-startup&gt;</code>后，只要开启web服务器就会调用init()方法，设置的整数值越大，表示优先级越大。<br>相关代码请参考：<br><strong><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/MyInitServlet1.java" target="_blank" rel="external">Github地址: init初始化代码</a></strong><br><strong><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/model/SendEmailThread.java" target="_blank" rel="external">Github地址: 发邮件代码</a></strong>  </p>
<h3 id="2-_u8BFB_u53D6_u521D_u59CB_u5316_u53C2_u6570"><a href="#2-_u8BFB_u53D6_u521D_u59CB_u5316_u53C2_u6570" class="headerlink" title="2.读取初始化参数"></a>2.读取初始化参数</h3><p>读取特定名字的参数：<br><code>this.getServletConfig().getInitParameter(&quot;名字&quot;)</code><br>获取所有参数名字：<br><code>this.getServletConfig().getInitParameterNames()</code><br>相关代码请参考：<br><strong><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/ServletConfigTest.java" target="_blank" rel="external">Github地址: 读取初始化参数</a></strong>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Servlet_u5DE5_u4F5C_u539F_u7406"><a href="#Servlet_u5DE5_u4F5C_u539F_u7406" class="headerlink" title="Servlet工作原理"></a><strong>Servl]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git总结]]></title>
    <link href="http://yoursite.com/2016/02/06/git%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/02/06/git总结/</id>
    <published>2016-02-06T10:16:52.000Z</published>
    <updated>2016-03-13T12:43:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Linux_u4E0B_u5B89_u88C5git"><a href="#Linux_u4E0B_u5B89_u88C5git" class="headerlink" title="Linux下安装git"></a>Linux下安装git</h3><p><code>sudo apt-get install git</code>或者<code>sudo apt-get install git-core</code></p>
<h3 id="Mac_OS_X_u4E0B_u5B89_u88C5git"><a href="#Mac_OS_X_u4E0B_u5B89_u88C5git" class="headerlink" title="Mac OS X下安装git"></a>Mac OS X下安装git</h3><p>首次需要安装<code>homebrew</code>，它的命令是：<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br>然后用<code>homebrew</code>安装<code>git</code>，命令是：<code>brew install git</code>,安装后输入<code>git --version</code>查看<code>git</code>安装是否成功，我的电脑显示<code>git version 2.7.0</code></p>
<h3 id="Windows_u4E0B_u5B89_u88C5git"><a href="#Windows_u4E0B_u5B89_u88C5git" class="headerlink" title="Windows下安装git"></a>Windows下安装git</h3><p>Linux或Mac大法好，赶紧换系统吧亲。  </p>
<p>安装完后需要设置:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="git_u547D_u4EE4"><a href="#git_u547D_u4EE4" class="headerlink" title="git命令"></a>git命令</h1><hr>
<p>以下只做命令总结，方便自己用到时能快速查询，学习<code>git</code>请点传送门：<br><strong><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程传送门</a></strong><br>建立仓库：<br><code>git init</code><br>把文件从工作区加到暂存区：<br><code>git add [filename]</code><br>文件提交到仓库：<br><code>git commit -m &quot;balabala&quot;</code><br>查看当前仓库状态：<br><code>git status</code><br>仓库状态为文件修改过，查看上一次修改情况：<br><code>git diff [filename]</code><br>查看提交历史：<br><code>git log</code><br>简化日志内容：<br><code>git log --pretty=oneline</code><br>回到上一版本：<br><code>git reset --hard HEAD^</code><br>回到上上一版本：<br><code>git reset --hard HEAD^^</code><br>回到前100版本：<br><code>git reset --hard HEAD~100</code><br>去到未来版本，commit_id为未来版本号：<br><code>git reset --hard [commit_id]</code><br>查看命令历史，包含commit_id等信息：<br><code>git reflog</code><br>查看工作区和版本库最新版本的区别：<br><code>git diff HEAD -- [filename]</code><br>丢弃工作区的修改回到和版本库一样；撤回修改到添加暂存区后状态：<br><code>git checkout -- [filename]</code><br>暂存区的修改撤销掉，重新放回工作区。再用上一条丢弃工作区修改：<br><code>git reset HEAD [filename]</code><br>从版本库中删除该文件并<code>git commit</code>：<br><code>git rm  [filename]</code><br>本地关联github远程库：<br><code>git remote add origin git@github.com:bupthuangxin/仓库名.git</code><br>本地库所有内容推送到远程库：<br><code>git push -u origin master</code><br>远程库克隆本地库：<br><code>git clone git@github.com:bupthuangxin/仓库名.git</code><br>创建dev分支并切换至dev：<br><code>git checkout -b dev</code><br>创建dev分支：<br><code>git branch dev</code><br>切换至dev分支：<br><code>git checkout dev</code><br>查看当前分支：<br><code>git branch</code><br>在master分支时，合并两分支，Fast-forward方式：<br><code>git merge dev</code><br>删除dev分支：<br><code>git branch -d dev</code><br>查看分支合并图：<br><code>git log --graph --pretty=oneline --abbrev-commit</code><br>禁用Fast-forward方式进行合并：<br><code>git merge --no-ff -m &quot;balabala&quot; dev</code><br>储藏当前分支的工作现场：<br><code>git stash</code><br>查看当前分支工作现场：<br><code>git stash list</code><br>恢复工作：<br><code>git stash apply</code><br>删除stash内容：<br><code>git stash drop</code><br>恢复并删除stash内容：<br><code>git stash pop</code><br>强行删除分支（分支还没合并）：<br><code>git branch -D dev</code><br>查看远程库信息：<br><code>git remote -v</code><br>此分支推送远程库：<br><code>git push origin [分支名]</code><br>克隆远程库只能看见master分支，切换到dev分支：<br><code>git checkout -b dev origin/dev</code><br>推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并：<br><code>git pull</code><br>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建：<br><code>git branch --set-upstream branch-name origin/branch-name</code><br>给当前版本打标签：<br><code>git tag [标签名]</code><br>查看所有标签：<br><code>git tag</code><br>给之前的版本打标签：<br><code>git tag [标签名] [commit_id]</code><br>查看标签信息：<br><code>git show [标签名]</code><br>用-a指定标签名，-m指定说明文字：<br><code>git tag -a [标签名] -m &quot;balabala&quot; [commit_id]</code><br>删除标签：<br><code>git tag -d [标签名]</code><br>推送标签到远程：<br><code>git push origin [标签名]</code><br>推送全部尚未推送到远程的本地标签：<br><code>git push origin --tags</code><br>删除远程标签：<br><code>git push origin :refs/tags/[标签名]</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Linux_u4E0B_u5B89_u88C5git"><a href="#Linux_u4E0B_u5B89_u88C5git" class="headerlink" title="Linux下安装git"></a>Linux下安装git</h3><p><cod]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[request和response中文乱码]]></title>
    <link href="http://yoursite.com/2016/02/03/request%E5%92%8Cresponse%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>http://yoursite.com/2016/02/03/request和response中文乱码/</id>
    <published>2016-02-03T10:27:41.000Z</published>
    <updated>2016-02-06T10:14:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="request_u548Cresponse_u4E2D_u6587_u4E71_u7801_u53CA_u89E3_u51B3_u65B9_u6CD5"><a href="#request_u548Cresponse_u4E2D_u6587_u4E71_u7801_u53CA_u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="request和response中文乱码及解决方法"></a>request和response中文乱码及解决方法</h2><p><strong><em>request乱码指的是</em></strong>：浏览器向服务器发送的请求参数中包含中文字符，服务器获取到的请求参数的值是乱码；<br><strong><em>response乱码指的是</em></strong>：服务器向浏览器发送的数据包含中文字符，浏览器中显示的是乱码; </p>
<p><strong><em>乱码产生的原因</em></strong>：不管是request乱码还是response乱码，其实都是由于浏览器跟服务器端采用的编码格式不一致造成的。以request乱码为例：浏览器向服务器发送请求，因为浏览器与服务器之间的通信实质上是socket流，所以要先将请求参数（字符）转换成字节(编码过程)，服务器接收到请求参数后进行解码（字节转字符），然后封装到request对象中。如果客户端的编码与服务器端的解码不统一，就会导致通过request获取到的请求参数的值是乱码。  </p>
<h3 id="response_u4E71_u7801"><a href="#response_u4E71_u7801" class="headerlink" title="response乱码"></a>response乱码</h3><p>服务器发给浏览器的数据默认是按照ISO-8859-1编码，浏览器接收到数据后按照默认的字符集进行解码后显示，如果浏览器的默认解码字符集不是ISO-8859-1，就出现乱码。对于response乱码，只需要在服务器端指定一个编码字符集，然后通知浏览器按照这个字符集进行解码就可以了。<br><strong>1.A设置服务器端的编码</strong><br><code>response.setCharacterEncoding(&quot;utf-8&quot;);</code>该方法必须在<code>response.getWriter()</code>之前进行设置。<br><strong>B通知浏览器服务器发送的数据格式</strong><br><code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code>等价于<br><code>response.setHeader(&quot;contentType&quot;, &quot;text/html; charset=utf-8&quot;);</code><br><strong>C浏览器使用utf-8进行解码</strong><br><strong>2.当用到<code>response.sendRedirect(&quot;____?name=&quot;+u)</code>转向时</strong>，u一定要为iso-8859-1编码方式，否则容易出现乱码。将utf-8编码的中文转为iso-8859-1编码：<br><code>String u=new String(uu.getBytes(&quot;utf-8&quot;),&quot;iso-8859-1&quot;);//uu为utf-8编码的中文</code><br>中文u的值传入到转向的servlet，iso-8859-1自动转为utf-8编码，若无自动转换，用上述转换代码进行转换。  </p>
<h3 id="request_u4E71_u7801"><a href="#request_u4E71_u7801" class="headerlink" title="request乱码"></a>request乱码</h3><p>从浏览器发起的访问方式有三种：在地址栏直接输入URL访问、点击页面中的超链接访问、提交表单访问。第一种访问方式浏览器默认将参数按照utf-8进行编码，后面两种访问方式浏览器将参数按照当前页面的显示编码进行编码。所以对于request乱码，只需要在服务器端设置相应的解码格式即可。由于访问方式不同，浏览器对参数的编码格式也不同，为了方便处理，通过超链接和表单的访问也规定必须是utf-8格式，即显示当前页面的编码也要使用utf-8，这样浏览器将统一使用utf-8对参数进行编码。<br><strong>1.post方式属于表单提交，参数存在于请求体中。</strong><br><code>request.setCharacterEncoding(&quot;utf-8&quot;)</code><br><strong>2.get方式属于表单提交，参数存在URL中，服务器按照默认的iso-8859-1进行解码</strong><br><code>String u=new String(request.getParameter(&quot;&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;)</code><br><strong>3.超链接访问中有中文参数时</strong>，可以修改服务器端对URL参数的默认编码。在tomcat的server.xml中，设置元素的属性URIEncoding=”UTF-8”即可。以上只要涉及URL中有中文都可试着用此方法解决。  </p>
<h3 id="u5229_u7528_u8FC7_u6EE4_u5668_u89E3_u51B3_u4E71_u7801_u95EE_u9898_uFF1A"><a href="#u5229_u7528_u8FC7_u6EE4_u5668_u89E3_u51B3_u4E71_u7801_u95EE_u9898_uFF1A" class="headerlink" title="利用过滤器解决乱码问题："></a>利用过滤器解决乱码问题：</h3><p>在Filter的<code>init</code>方法中获取<code>web.xml</code>的filter编码设置：<br><code>String charEncoding=fConfig.getInitParameter(&quot;encoding&quot;);</code><br>在Filter的<code>doFilter</code>方法中设置：  </p>
<pre><code class="java"><span class="comment">//当前应用的默认编码与请求的编码值不相同，执行</span>
<span class="keyword">if</span>(!charEncoding.equal(request.getCharacterEncoding())){
    request.getCharacterEncoding(charEncoding)；
}
response.getCharacterEncoding(charEncoding)；
</code></pre>
<p>web.xml配置<br><code>&lt;filter&gt;</code><br><code>&lt;init-param&gt;</code><br><code>&lt;param-name&gt;encoding&lt;/param-name&gt;</code><br><code>&lt;param-value&gt;UTF-8&lt;/param-value&gt;</code><br><code>&lt;/init-param&gt;</code><br><code>&lt;/filter&gt;</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="request_u548Cresponse_u4E2D_u6587_u4E71_u7801_u53CA_u89E3_u51B3_u65B9_u6CD5"><a href="#request_u548Cresponse_u4E2D_u6587_u4E71_u7801]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/01/28/hello-world/"/>
    <id>http://yoursite.com/2016/01/28/hello-world/</id>
    <published>2016-01-27T16:44:31.000Z</published>
    <updated>2016-01-27T16:44:31.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
