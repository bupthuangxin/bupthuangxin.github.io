<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[黄鑫's blog]]></title>
  <subtitle><![CDATA[Walk steps step by step]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-16T12:55:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Huang xin]]></name>
    <email><![CDATA[308071066@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ServletConfig和ServletContext以及读取资源的方法]]></title>
    <link href="http://yoursite.com/2016/03/16/ServletConfig%E5%92%8CServletContext%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E8%AF%BB%E5%8F%96%E8%B5%84%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/03/16/ServletConfig和ServletContext对象以及读取资源的方法/</id>
    <published>2016-03-16T12:41:42.000Z</published>
    <updated>2016-03-16T12:55:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="ServletConfig_u5BF9_u8C61"><a href="#ServletConfig_u5BF9_u8C61" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h3><p>当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，程序员通过ServletConfig对象就可以得到当前servlet的初始化参数信息。  </p>
<pre><code class="java"><span class="comment">//获得配置文档中&lt;init-param&gt;标签下name对应的value</span>
<span class="keyword">this</span>.getServletConfig().getInitParameter(<span class="string">"name"</span>);
<span class="comment">//获取所有初始化参数</span>
Enumeration e = <span class="keyword">this</span>.getServletConfig().getInitParameterNames();
<span class="keyword">while</span>(e.hasMoreElements()){
    String name = (String) e.nextElement();
    String value = <span class="keyword">this</span>.getServletConfig().getInitParameter(name);
    System.out.println(name + <span class="string">"="</span> + value);
}
</code></pre>
<p>一般应用于<br>1.获取字符集编码<br><code>String charset = this.getServletConfig().getInitParameter(&quot;charset&quot;);</code><br>2.获得数据库连接信息<br><code>String url = this.getServletConfig().getInitParameter(&quot;url&quot;);</code><br><code>String username = this.getServletConfig().getInitParameter(&quot;username&quot;);</code><br><code>String password = this.getServletConfig().getInitParameter(&quot;password&quot;);</code><br>3.获得配置文件<br><code>String configFile = this.getServletConfig().getInitParameter(&quot;config&quot;);</code>  </p>
<h2 id="ServletContext_u5BF9_u8C61"><a href="#ServletContext_u5BF9_u8C61" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><p>web容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。当应用关闭(或reload tomcat)时，自动销毁。<br><strong><em>1.多个servlet通过ServletConfig()实现数据共享</em></strong><br>由于一个web应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现通讯。ServletContext对象通常也被称之为context域对象。  </p>
<pre><code class="java"><span class="comment">//servletContext域对象</span>
ServletContext servletcontext = <span class="keyword">this</span>.getServletContext();
<span class="comment">//向域中存了一个属性</span>
servletcontext.setAttribute(<span class="string">"String"</span>,object);

<span class="comment">//另一个servlet</span>
ServletContext servletcontext = <span class="keyword">this</span>.getServletContext();
<span class="comment">//获取域中的属性</span>
String value = (String) context.getAttribute(<span class="string">"String"</span>);
</code></pre>
<p><strong><em>2.通过servletContext对象获取到整个web应用的配置信息</em></strong><br>获取单个servlet配置信息用servletConfig，当配置信息是全体时：  </p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>
    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>
    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>huangxin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>
<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>
</code></pre>
<p>那么用 <code>this.getServletContext().getInitParameter(&quot;name&quot;)</code>,可以取出配置信息。<br><strong><em>3.通过servletContext对象实现转发</em></strong><br><code>this.getServletContext().getRequestDispatcher(&quot;/...&quot;).forward(request, response);</code><br><strong><em>4.通过servletContext对象读取资源文件</em></strong><br>在web工程中，我们一般来说，是不能采用传统方式读取配置文件的，因为相对的是jvm的启动目录(tomcat的bin目录)，所以我们要使用web绝对目录来获取配置文件的地址。<br>1）使用ServletContext的getResourceAsStream方法：返回资源文件的读取字节流  </p>
<pre><code class="java"><span class="comment">//db.properties在webRoot目录下</span>
InputStream in = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">"/db.properties"</span>);
Properties prop = <span class="keyword">new</span> Properties();  
prop.load(in);
String url = prop.getProperty(<span class="string">"url"</span>);
</code></pre>
<p>2）使用ServletContext的getRealPath方法，获得文件的完整绝对路径path，再使用字节流读取path下的文件（除了可以获取数据，还可以获取资源文件的名称）  </p>
<pre><code class="java"><span class="comment">//文件imgs在webRoot目录下</span>
String path = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/imgs/Sunset.jpg"</span>);
FileInputStream in = <span class="keyword">new</span> FileInputStream(path);
Properties prop = <span class="keyword">new</span> Properties();
prop.load(in);
String url = prop.getProperty(<span class="string">"url"</span>);
</code></pre>
<p>3）当资源文件放在src路径下，上述方法不可行，应该用类加载器读取  </p>
<pre><code class="java">类名.class.getClassLoader().getResource(<span class="string">"db.properties"</span>);
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="ServletConfig_u5BF9_u8C61"><a href="#ServletConfig_u5BF9_u8C61" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h3><]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[会话技术session]]></title>
    <link href="http://yoursite.com/2016/03/16/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AFsession/"/>
    <id>http://yoursite.com/2016/03/16/会话技术session/</id>
    <published>2016-03-16T05:56:14.000Z</published>
    <updated>2016-03-16T05:59:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4F1A_u8BDD_u6982_u5FF5"><a href="#u4F1A_u8BDD_u6982_u5FF5" class="headerlink" title="会话概念"></a><strong>会话概念</strong></h2><p>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。<br>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据。  </p>
<h2 id="u4FDD_u5B58_u4F1A_u8BDD_u6570_u636E_u7684_u4E24_u79CD_u6280_u672F"><a href="#u4FDD_u5B58_u4F1A_u8BDD_u6570_u636E_u7684_u4E24_u79CD_u6280_u672F" class="headerlink" title="保存会话数据的两种技术"></a><strong>保存会话数据的两种技术</strong></h2><h3 id="cookie_u673A_u5236"><a href="#cookie_u673A_u5236" class="headerlink" title="cookie机制"></a>cookie机制</h3><blockquote>
<p>1.Cookie是客户端技术。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。例如，用户A在超市购买的任何商品都应该放在A的购物车内，不论是用户A什么时间购买的，这都是属于同一个会话的，不能放入用户B或用户C的购物车内，这不属于同一个会话。<br>2.而Web应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。<br>3.Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。  </p>
</blockquote>
<h2 id="session_u673A_u5236"><a href="#session_u673A_u5236" class="headerlink" title="session机制"></a>session机制</h2><blockquote>
<p>Session是服务器端技术。服务器在运行时可以为每一个用户的浏览器创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问服务器中的其它web资源时，其它web资源再从用户各自的session中取出数据为用户服务。  </p>
</blockquote>
<h3 id="session_u5DE5_u4F5C_u539F_u7406"><a href="#session_u5DE5_u4F5C_u539F_u7406" class="headerlink" title="session工作原理"></a>session工作原理</h3><p>浏览器访问web服务器，web服务器访问servlet后，当第一次访问session时，就自动创建此浏览器独享的session，此session是由key-value组成，key是<code>String</code>，value是<code>object</code>。<br>当request访问servlet1时，建立此浏览器对应的session，并为此session分配<code>session id</code>，response时在cookie中回一个<code>JSESSIONID</code>(set-cookie中)，当此浏览器再次发送http请求时，会在cookie中顺带session id，服务器根据<code>id号</code>寻找与之匹配的session。  </p>
<h3 id="u521B_u5EFAsession"><a href="#u521B_u5EFAsession" class="headerlink" title="创建session"></a>创建session</h3><pre><code class="java"><span class="comment">//获取session 当没有就自动创建</span>
HttpSession session=request.getSession();
<span class="comment">//给该session放入属性</span>
session.setAttribute(<span class="string">"uname"</span>, object); 
<span class="comment">//取出属性</span>
String uname=(object) session.getAttribute(<span class="string">"uname"</span>);
</code></pre>
<p>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/session1/src/com/huangxin/Servlet1.java" target="_blank" rel="external">Github地址：创建session</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/session1/src/com/huangxin/Servlet2.java" target="_blank" rel="external">Github地址：取出session</a></em></strong>  </p>
<h3 id="u751F_u547D_u5468_u671F"><a href="#u751F_u547D_u5468_u671F" class="headerlink" title="生命周期"></a>生命周期</h3><p>1.cookie的生命周期是单个设置的，为累计时间，而session得生命周期为整体设置，为发呆时间(只要访问一次就重新计时)。  </p>
<pre><code class="java">HttpSession session=request.getSession();
session.setMaxInactiveInterval(<span class="number">30</span>)<span class="comment">//30s</span>
</code></pre>
<p>如果想要配置单个项目的发呆时间，配置如下：  </p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span>
    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span>
<span class="tag">&lt;/<span class="name">session-config</span>&gt;</span>
</code></pre>
<p>2.当重启tomcat，reload或者关机时，session失效。可以强制让其失效，<code>session.invalidate()</code>一般用于安全退出，希望某个属性失效用<code>session.removeAttribute()</code>。  </p>
<h3 id="u6848_u4F8B_uFF1A_u5229_u7528session_u5B9E_u73B0_u9A8C_u8BC1_u7801_u529F_u80FD"><a href="#u6848_u4F8B_uFF1A_u5229_u7528session_u5B9E_u73B0_u9A8C_u8BC1_u7801_u529F_u80FD" class="headerlink" title="案例：利用session实现验证码功能"></a>案例：利用session实现验证码功能</h3><p><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/mycheckcode/src/com/huangxin/Login.java" target="_blank" rel="external">Github地址：登陆页面</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/mycheckcode/src/com/huangxin/LoginCl.java" target="_blank" rel="external">Github地址：处理页面</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/mycheckcode/src/com/huangxin/CreateCode.java" target="_blank" rel="external">Github地址：创建验证码</a></em></strong><br><code>思路：创建验证码图片，并把验证码内容存入session中，再获取用户输入的验证码，将两者进行比较，若相同验证成功，进一步去数据库验证用户名和密码等信息。</code>  </p>
<h3 id="u6848_u4F8B_uFF1Asession+cookie"><a href="#u6848_u4F8B_uFF1Asession+cookie" class="headerlink" title="案例：session+cookie"></a>案例：session+cookie</h3><p>关闭浏览器，session是不会消失的，它一直存在于服务器的内存中，只有到销毁时间过后，session才会在服务器端消失。<code>一般情况下cookie不会保存session id的，只有我们强行把session id写在cookie中浏览器端才会保存</code>，这样当我们利用<code>cookie携带session id</code>就可以访问原来已经创建好的session了。  </p>
<pre><code class="java">HttpSession session=request.getSession();
session.setAttribute(<span class="string">"username"</span>, <span class="string">"BUPT"</span>);
<span class="comment">//把session id保存在cookie中</span>
Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());
cookie.setMaxAge(<span class="number">3600</span>);
response.addCookie(cookie);

<span class="comment">//访问 在此访问此项目其他的servlet时，浏览器http请求中包括了cookie信息</span>
<span class="comment">//所以自动匹配了session，直接读取session属性即可</span>
String name=(String) request.getSession().getAttribute(<span class="string">"username"</span>);
</code></pre>
<p>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/session2/src/com/huangxin/Servlet1.java" target="_blank" rel="external">Github地址：cookie+session</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/session2/src/com/huangxin/Servlet2.java" target="_blank" rel="external">Github地址：关浏览器再获取session</a></em></strong>  </p>
<h3 id="u6848_u4F8B_uFF1A_u5F53_u7981_u7528cookie_u540E_uFF0C_u600E_u6837_u4F7F_u7528session"><a href="#u6848_u4F8B_uFF1A_u5F53_u7981_u7528cookie_u540E_uFF0C_u600E_u6837_u4F7F_u7528session" class="headerlink" title="案例：当禁用cookie后，怎样使用session"></a>案例：当禁用cookie后，怎样使用session</h3><p>由于cookie中包含session id信息，如果cookie遭到禁用的话，session也会随之无法使用，那么在用户禁用cookie后，怎么才能继续使用session呢。  </p>
<blockquote>
<p>利用URL重写，URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。HttpServletResponse类提供了encodeURL(Stringurl)实现URL地址重写。  </p>
</blockquote>
<p><code>String url=response.encodeURL(&quot;/myCart/BuyBookCl?id=1&amp;name=java&quot;);</code><br>该方法会自动判断客户端是否支持Cookie。如果客户端支持Cookie，会将URL原封不动地输出来。如果客户端不支持Cookie，则会将用户Session的id重写到URL中。<br><code>/myCart/BuyBookCl;jsessionid=0CCD096E7F8D97B0BE608AFDC3E1931E?id=1&amp;name=java</code><br>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/tree/master/myCart/src/com/huangxin" target="_blank" rel="external">Github地址：购物车项目</a></em></strong>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4F1A_u8BDD_u6982_u5FF5"><a href="#u4F1A_u8BDD_u6982_u5FF5" class="headerlink" title="会话概念"></a><strong>会话概念</strong></h2><p>会话可简单理解]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[会话技术cookie]]></title>
    <link href="http://yoursite.com/2016/03/14/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AFcookie/"/>
    <id>http://yoursite.com/2016/03/14/会话技术cookie/</id>
    <published>2016-03-14T09:12:55.000Z</published>
    <updated>2016-03-14T11:20:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4F1A_u8BDD_u6982_u5FF5"><a href="#u4F1A_u8BDD_u6982_u5FF5" class="headerlink" title="会话概念"></a><strong>会话概念</strong></h2><p>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。<br>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据。  </p>
<h2 id="u4FDD_u5B58_u4F1A_u8BDD_u6570_u636E_u7684_u4E24_u79CD_u6280_u672F"><a href="#u4FDD_u5B58_u4F1A_u8BDD_u6570_u636E_u7684_u4E24_u79CD_u6280_u672F" class="headerlink" title="保存会话数据的两种技术"></a><strong>保存会话数据的两种技术</strong></h2><h3 id="cookie_u673A_u5236"><a href="#cookie_u673A_u5236" class="headerlink" title="cookie机制"></a>cookie机制</h3><blockquote>
<p>1.Cookie是客户端技术。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。例如，用户A在超市购买的任何商品都应该放在A的购物车内，不论是用户A什么时间购买的，这都是属于同一个会话的，不能放入用户B或用户C的购物车内，这不属于同一个会话。<br>2.而Web应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。<br>3.Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。  </p>
</blockquote>
<h2 id="session_u673A_u5236"><a href="#session_u673A_u5236" class="headerlink" title="session机制"></a>session机制</h2><blockquote>
<p>Session是服务器端技术。服务器在运行时可以为每一个用户的浏览器创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问服务器中的其它web资源时，其它web资源再从用户各自的session中取出数据为用户服务。  </p>
</blockquote>
<h3 id="cookie_u5E94_u7528"><a href="#cookie_u5E94_u7528" class="headerlink" title="cookie应用"></a>cookie应用</h3><pre><code class="Java"><span class="comment">//cookie中文处理</span>
String name=java.net.URLEncoder.encode(<span class="string">"黄鑫"</span>,<span class="string">"utf-8"</span>);
<span class="comment">//创建cookie</span>
Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"name"</span>,name);
<span class="comment">//设置cookie的生命周期</span>
cookie.setMaxAge(<span class="number">3600</span>);
<span class="comment">//把cookie信息回写给浏览器，响应头Set-Cookie中内容</span>
response.addCookie(cookie);

<span class="comment">//读取所有cookie信息再筛选</span>
Cookie cookies[]=request.getCookies();
<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cookies.length;i++){
    Cookie cookie=cookies[i];
    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"name"</span>)){
        <span class="comment">//对中文进行解码</span>
        String val=java.net.URLDecoder.decode(cookie.getValue(),<span class="string">"utf-8"</span>);
        out.println(cookie.getName()+<span class="string">" "</span>+val);
    }
}
</code></pre>
<p>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/cookie1/src/com/huangxin/CreateCookie.java" target="_blank" rel="external">Github地址：创建cookie</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/cookie1/src/com/huangxin/ReadCookie1.java" target="_blank" rel="external">Github地址：读取cookie</a></em></strong>  </p>
<blockquote>
<p>1.<code>public void setMaxAge(int expiry)</code>这个方法是设置Cookie的最大保存时间，即cookie的有效期。<br>2.当服务器给浏览器回送一个cookie时，如果在服务器端没有调用setMaxAge方法设置cookie的有效期，那么cookie的有效期只在一次会话过程中有效，当用户关闭浏览器，会话就结束了，此时cookie就会失效。<br>3.如果在服务器端使用setMaxAge方法设置了cookie的有效期，比如设置了30分钟，那么当服务器把cookie发送给浏览器时，此时cookie就会在客户端的硬盘上存储30分钟，在30分钟内，即使浏览器关了，cookie依然存在，在30分钟内，打开浏览器访问服务器时，浏览器都会把cookie一起带上，这样就可以在服务器端获取到客户端浏览器传递过来的cookie里面的信息了。  </p>
</blockquote>
<h3 id="u6848_u4F8B_uFF1A_u5B58_u50A8_u4E0A_u4E00_u6B21_u8BBF_u95EE_u65F6_u95F4"><a href="#u6848_u4F8B_uFF1A_u5B58_u50A8_u4E0A_u4E00_u6B21_u8BBF_u95EE_u65F6_u95F4" class="headerlink" title="案例：存储上一次访问时间"></a>案例：存储上一次访问时间</h3><pre><code class="Java">Cookie[] cookies=request.getCookies();
<span class="keyword">boolean</span> b=<span class="keyword">false</span>;<span class="comment">//假设没有此cookie</span>
<span class="keyword">if</span>(cookies!=<span class="keyword">null</span>){
    <span class="keyword">for</span>(Cookie cookie:cookies){
        String name=cookie.getName();
        <span class="keyword">if</span>(<span class="string">"lasttime"</span>.equals(name)){
            out.println(<span class="string">"您上次登录的时间:"</span>+cookie.getValue());
            <span class="comment">//更新</span>
            SimpleDateFormat simpleDateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);
            String nowTime = simpleDateFormat.format(<span class="keyword">new</span> java.util.Date());
            <span class="comment">//Cookie mycookie=new Cookie("lasttime",nowTime);</span>
            cookie.setValue(nowTime);
            cookie.setMaxAge(<span class="number">3600</span>);
            response.addCookie(cookie);
            b=<span class="keyword">true</span>;
            <span class="keyword">break</span>;
        }
    }
}

<span class="keyword">if</span>(b==<span class="keyword">false</span>){
    out.println(<span class="string">"first"</span>);
    SimpleDateFormat simpleDateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);
    String nowTime = simpleDateFormat.format(<span class="keyword">new</span> java.util.Date());
    Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"lasttime"</span>,nowTime);
    cookie.setMaxAge(<span class="number">3600</span>);
    response.addCookie(cookie);
}
</code></pre>
<p>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/cookie1/src/com/huangxin/Servlet1.java" target="_blank" rel="external">Github地址：存取上一次访问时间</a></em></strong>  </p>
<h3 id="u6848_u4F8B_uFF1Acookie_u767B_u9646"><a href="#u6848_u4F8B_uFF1Acookie_u767B_u9646" class="headerlink" title="案例：cookie登陆"></a>案例：cookie登陆</h3><pre><code class="Java">String value = request.getParameter(<span class="string">"iskeepinfo"</span>);
String id = request.getParameter(<span class="string">"id"</span>);
<span class="keyword">if</span>(value!=<span class="keyword">null</span>&amp;&amp;value.equals(<span class="string">"keep"</span>)){
    <span class="comment">//保存id</span>
    <span class="comment">//创建cookie保存到登录用户的机器上</span>
    Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"id"</span>,id);
    cookie.setMaxAge(<span class="number">3600</span>);
    response.addCookie(cookie);
    request.getRequestDispatcher(<span class="string">"/Ok"</span>).forward(request, response);
}<span class="keyword">else</span> <span class="keyword">if</span>(value!=<span class="keyword">null</span>&amp;&amp;value.equals(<span class="string">"nokeep"</span>)){
    Cookie[] cookies=request.getCookies();
    <span class="keyword">for</span>(Cookie cookie:cookies){
        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"id"</span>)){
            cookie.setMaxAge(<span class="number">0</span>);
            response.addCookie(cookie);
        }
    }
}<span class="keyword">else</span>{
    request.getRequestDispatcher(<span class="string">"/Ok"</span>).forward(request, response);
}
</code></pre>
<p>删除cookie<code>cookie.setMaxAge(0)</code>即可<br>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/cookie2/src/com/huangxin/view/Login.java" target="_blank" rel="external">Github地址：登陆页面</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/cookie2/src/com/huangxin/controller/LoginCl.java" target="_blank" rel="external">Github地址：cookie处理</a></em></strong>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4F1A_u8BDD_u6982_u5FF5"><a href="#u4F1A_u8BDD_u6982_u5FF5" class="headerlink" title="会话概念"></a><strong>会话概念</strong></h2><p>会话可简单理解]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HttpServletResponse和HttpServletRequest常见应用]]></title>
    <link href="http://yoursite.com/2016/03/14/HttpServletResponse%E5%92%8CHttpServletRequest%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/14/HttpServletResponse和HttpServletRequest常见应用/</id>
    <published>2016-03-14T06:48:21.000Z</published>
    <updated>2016-03-14T06:49:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a><strong>HttpServletResponse</strong></h1><ul>
<li>向客户端输出数据  <pre><code class="Java"><span class="comment">//文本文件（字符）</span>
PrintWriter out = response.getWriter();
out.println(<span class="string">"hello world"</span>);
<span class="comment">//二进制文件（字节/字符）</span>
OutputStream os=response.getOutputStream();
os.write(<span class="string">"hello world"</span>.getBytes());
</code></pre>
两个流不能同时使用，当回送字符时，PrintWriter效率更高一些，回送字节用OutputStream。  </li>
<li>请求重定向  <pre><code class="Java">response.sendRedirect(<span class="string">"/UserManager/LoginServlet"</span>);<span class="comment">//"资源"</span>
<span class="comment">//向下一个资源传递参数</span>
response.sendRedirect(<span class="string">"/UserManager/MainFrame?uname="</span>+username+<span class="string">"&amp;pwd="</span>+password);
</code></pre>
注意当用sendRedirect传递参数时，只能传<code>String</code>，不能传<code>object</code>。此重定向会回到浏览器。  </li>
<li>发送http响应头  <pre><code class="Java">response.setHeader(<span class="string">"报头名"</span>,<span class="string">"内容"</span>)<span class="comment">//来设置回送</span>
response.setContentType(<span class="string">"text/html;charset=utf-8"</span>)<span class="comment">//设置回送内容样式</span>
response.setStatus()<span class="comment">//设置状态码</span>
response.setCharacterEncoding(<span class="string">"utf-8"</span>)
</code></pre>
具体内容见上一篇文章 <strong><em><a href="http://huangxin1993.top/2016/03/14/HTTP协议详解/" target="_blank" rel="external">HTTP协议详解</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject2/src/com/hx/ResponseTest.java" target="_blank" rel="external">Github地址：设置响应报头</a></em></strong>  </li>
<li>文件下载<br>具体内容见上一篇文章 <strong><em><a href="http://huangxin1993.top/2016/03/14/HTTP协议详解/" target="_blank" rel="external">HTTP协议详解</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/Download.java" target="_blank" rel="external">Github地址：文件下载</a></em></strong>  </li>
</ul>
<h1 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a><strong>HttpServletRequest</strong></h1><ul>
<li>获取客户机请求头信息  <pre><code class="Java"><span class="comment">//获取URL</span>
String URL=request.getRequestURL().toString();
<span class="comment">//获取URI，web名+资源名</span>
String URI=request.getRequestURI();
<span class="comment">//获取请求数据 URL？username=aa&amp;pwd=123</span>
String queryString=request.getQueryString();
<span class="comment">//获取请求客户端IP地址</span>
String remoteAddr=request.getRemoteAddr();
<span class="comment">//获取web服务器IP地址</span>
String localAddr=request.getLocalAddr();
<span class="comment">//获取请求主机名（DNS注册），若无注册为IP地址</span>
String remoteHost=request.getRemoteHost();
<span class="comment">//获取web服务器主机名</span>
String localName=request.getLocalName();
<span class="comment">//获取客户机端口号</span>
<span class="keyword">int</span> remotePort=request.getRemotePort();
<span class="comment">//获取web服务器端口号</span>
<span class="keyword">int</span> localPort=request.getLocalPort();
</code></pre>
具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject3/src/com/huangxin/GetInfoServlet.java" target="_blank" rel="external">Github地址：获取客户机信息</a></em></strong><br><code>request.getHeader(&quot;请求头名&quot;)</code><br><code>request.getHeaderNames()</code>可以获取所有Header头的名字<br>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject3/src/com/huangxin/GetRequestHeader.java" target="_blank" rel="external">Github地址：获取客户机信息</a></em></strong>  </li>
<li>获取客户机请求参数（表单）  <pre><code class="Java"><span class="comment">//接收参数</span>
String u=request.getParameter(<span class="string">"username"</span>);
<span class="comment">//接收复选框</span>
String[] hobbies=request.getParameterValues(<span class="string">"hobby"</span>);
</code></pre>
具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject3/src/com/huangxin/RegisterCl.java" target="_blank" rel="external">Github地址：获取请求参数</a></em></strong>  </li>
<li>请求转向<pre><code class="Java"><span class="comment">//将参数传递给下一个页面</span>
request.setAttribute(<span class="string">"u"</span>, username);
request.getRequestDispatcher(<span class="string">"/Servlet2"</span>).forward(request, response);
<span class="comment">//第二页面获取参数</span>
String username=(String) request.getAttribute(<span class="string">"u"</span>);
</code></pre>
<blockquote>
<p><strong><em>请求转向和请求重定向的区别</em></strong><br>1.请求重定向传递参数为<code>response.sendRedirect(&quot;/UserManager/MainFrame?uname=&quot;+username+&quot;&amp;pwd=&quot;+password);</code>，只能传递<code>String</code>，请求转向传递参数为<code>request.setAttribute(&quot;u&quot;, username)</code>，key为String，value为object。<br>2.请求重定向可以转向该web应用之外的URL，而请求转向不能访问此web应用，因为其发生在服务器端，没有回到浏览器端。<br>3.请求转向地址栏显示第一次forward的URL，但数据为第二次的。<br>4.<code>request.setAttribute(&quot;u&quot;, username)</code>把数据放在request域对象中，属性在一次请求中有效（请求未回到浏览器成为一次请求）。  </p>
</blockquote>
</li>
</ul>
<p>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/requestForward/src/com/huangxin/Login.java" target="_blank" rel="external">Github地址：登陆表单</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/requestForward/src/com/huangxin/Servlet1.java" target="_blank" rel="external">Github地址：servlet1请求转向</a></em></strong><br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/requestForward/src/com/huangxin/Servlet2.java" target="_blank" rel="external">Github地址：servlet2接收</a></em></strong>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a><strong>HttpServletResponse</]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP协议详解]]></title>
    <link href="http://yoursite.com/2016/03/14/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/03/14/HTTP协议详解/</id>
    <published>2016-03-14T04:11:55.000Z</published>
    <updated>2016-03-14T04:18:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="http_u534F_u8BAE_u5B9A_u4E49"><a href="#http_u534F_u8BAE_u5B9A_u4E49" class="headerlink" title="http协议定义"></a><strong>http协议定义</strong></h2><p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器，目前我们使用的是HTTP/1.1 版本。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a><strong>URL</strong></h2><p>URL(Uniform Resource Locator) 地址用于描述一个网络上的资源，基本格式如下：<br><code>schema://host[:port#]/path/.../[;url-params][?query-string][#anchor]</code>  </p>
<ul>
<li>scheme 指定低层使用的协议(例如：http, https, ftp)</li>
<li>host 指HTTP服务器的IP地址或者域名</li>
<li>port# HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.cnblogs.com:8080/" target="_blank" rel="external">http://www.cnblogs.com:8080/</a></li>
<li>path 访问资源的路径</li>
<li>url-params，query-string 发送给http服务器的数据</li>
<li>anchor 锚  </li>
</ul>
<h2 id="http_u662F_u65E0_u72B6_u6001_u7684"><a href="#http_u662F_u65E0_u72B6_u6001_u7684" class="headerlink" title="http是无状态的"></a><strong>http是无状态的</strong></h2><p>http协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。为了解决这个问题，Web程序引入了Cookie机制来维护状态。  </p>
<h2 id="Get_u548CPost_u7684_u533A_u522B"><a href="#Get_u548CPost_u7684_u533A_u522B" class="headerlink" title="Get和Post的区别"></a><strong>Get和Post的区别</strong></h2><ul>
<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制</li>
<li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码  </li>
</ul>
<h2 id="http_u8BF7_u6C42"><a href="#http_u8BF7_u6C42" class="headerlink" title="http请求"></a><strong>http请求</strong></h2><p>http请求由三部分组成，分别是：<strong><em>请求行</em></strong>、<strong><em>消息报头header</em></strong>、<strong><em>请求正文body</em></strong><br>1.请求行<br><code>请求方法+统一资源标识符+http协议版本</code><br>当用get方法时，boby中无内容。<br>2.消息报头<br><code>request.getHeader(&quot;报头名&quot;)</code>就可以获取报头信息。<br><strong><em>Accept</em></strong><br>Accept请求报头域用于指定客户端接受哪些类型的信息。eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，表明客户端希望接受html文本。<br><strong><em>Accept-Charset</em></strong><br>Accept-Charset请求报头域用于指定客户端接受的字符集。eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。<br><strong><em>Accept-Encoding</em></strong><br>Accept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。<br><strong><em>Accept-Language</em></strong><br>Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。<br><strong><em>Host</em></strong><br>Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的，eg：<br>我们在浏览器中输入：<code>http://www.bupt.edu.cn/index.html</code><br>浏览器发送的请求消息中，就会包含Host请求报头域，如下：<br><code>Host：www.bupt.edu.cn</code><br>此处使用缺省端口号80，若指定了端口号，则变成：<code>Host：www.bupt.edu.cn:指定端口号</code><br><strong><em>User-Agent</em></strong><br>服务器应用程序就是从User-Agent这个请求报头域中获取操作系统和浏览器的名称和版本。User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。<br><strong><em>Date</em></strong><br>普通报头域表示消息产生的日期和时间。<br><strong><em>Connection</em></strong><br>普通报头域允许发送指定连接的选项。例如指定连接是连续“keep-alive”，或者指定“close”选项，通知服务器，在响应完成后，关闭连接。<br><strong><em>Referer</em></strong><br>提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的。<br>用于防盗链的例子：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/RequestTest.java" target="_blank" rel="external">Github地址：防盗链</a></em></strong></p>
<pre><code class="java">String referer=request.getHeader(<span class="string">"Referer"</span>);  
<span class="keyword">if</span>(referer==<span class="keyword">null</span>||!referer.startsWith(<span class="string">"http://localhost:8080/servletProject"</span>)){
    response.sendRedirect(<span class="string">"/servletProject/Error"</span>);
    <span class="keyword">return</span>;
}
</code></pre>
<p><strong><em>Cookie</em></strong><br>将cookie的值发送给服务器  </p>
<h2 id="http_u54CD_u5E94"><a href="#http_u54CD_u5E94" class="headerlink" title="http响应"></a><strong>http响应</strong></h2><p>HTTP响应也是由三个部分组成，分别是：<strong><em>状态行</em></strong>、<strong><em>消息报头</em></strong>、<strong><em>响应正文</em></strong><br>1.状态行<br><code>服务器HTTP协议的版本+服务器发回的响应状态代码+状态代码的文本描述</code><br>常用的状态码与文本描述：<br><code>response.setStatus(302);</code><br><code>response.setHeader(&quot;Location&quot;, &quot;/servletPro/Servlet2&quot;);</code><br>与<code>response.sendRedirect(&quot;/servletPro/Servlet2&quot;);</code>相同  </p>
<blockquote>
<p>200 OK      //客户端请求成功<br>302   //请求资源，服务器让浏览器转向某外资源<br>400 Bad Request  //客户端请求有语法错误，不能被服务器所理解<br>403 Forbidden  //服务器收到请求，但是拒绝提供服务<br>404 Not Found  //请求资源不存在，eg：输入了错误的URL<br>500 Internal Server Error //服务器发生不可预期的错误<br>503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常  </p>
</blockquote>
<p>2.消息报头<br><code>response.setHeader(&quot;报头名&quot;,&quot;内容&quot;)</code>来设置回送<br><code>response.setContentType(&quot;text/html;charset=utf-8&quot;)</code>设置回送内容样式<br><code>response.setStatus()</code>设置状态码<br><code>response.setCharacterEncoding(&quot;utf-8&quot;)</code><br>具体代码请参考：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject2/src/com/hx/ResponseTest.java" target="_blank" rel="external">Github地址：设置响应报头</a></em></strong><br><strong><em>Location</em></strong><br>用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。<br><strong><em>Server</em></strong><br>包含了服务器用来处理请求的软件信息。<br><strong><em>Content-Encoding、Content-Length、Content-Language</em></strong><br>关于回送的字节信息<br><strong><em>Content-Type</em></strong><br>Content-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。eg：<br><code>Content-Type:text/html;charset=ISO-8859-1</code><br><code>Content-Type:text/html;charset=GB2312</code><br><strong><em>Last-Modified</em></strong><br>Last-Modified实体报头域用于指示资源的最后修改日期和时间。<br><strong><em>Refresh</em></strong><br>设置过多久刷新到此URL。<br>定时刷新：<br><code>response.setHeader(&quot;Refresh&quot;, &quot;5;url=/servletProject2/ResponseTest&quot;);</code><br><strong><em>Content-Disposition</em></strong><br>告诉浏览器有文件要下载。<br><code>response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot;+文件);</code><br>文件下载例子：<br><strong><em><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/Download.java" target="_blank" rel="external">Github地址：文件下载</a></em></strong>  先把资源读到servlet当中，再写给浏览器<br><strong><em>set-cookie</em></strong><br>为浏览器设置cookie。<br><strong><em>Expires、Cache-control、Pragrma</em></strong><br>告诉浏览器如何缓存  </p>
<pre><code class="java"><span class="comment">//不缓存</span>
response.setDateHeader(<span class="string">"Expires"</span>, -<span class="number">1</span>);
response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);
response.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>);
<span class="comment">//缓存一个小时</span>
response.setDateHeader(<span class="string">"Expires"</span>, System.currentTimeMillis()+<span class="number">3600</span>*<span class="number">1000</span>*<span class="number">24</span>);
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="http_u534F_u8BAE_u5B9A_u4E49"><a href="#http_u534F_u8BAE_u5B9A_u4E49" class="headerlink" title="http协议定义"></a><strong>http协议定义</stro]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[servlet生命周期及web.xml配置]]></title>
    <link href="http://yoursite.com/2016/03/13/servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8Aweb.xml%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/03/13/servlet生命周期及web.xml配置/</id>
    <published>2016-03-13T14:32:02.000Z</published>
    <updated>2016-03-13T14:57:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Servlet_u5DE5_u4F5C_u539F_u7406"><a href="#Servlet_u5DE5_u4F5C_u539F_u7406" class="headerlink" title="Servlet工作原理"></a><strong>Servlet工作原理</strong></h2><ul>
<li>浏览器向web服务器发送http请求</li>
<li>web服务器解析主机地址，解析webapps，解析资源名，向web.xml查询servlet位置</li>
<li>web服务器创建HttpServletRequest对象，将http请求封装在里面</li>
<li>web服务器创建HttpServletResponse对象</li>
<li>创建servlet实例，第一调用时执行init()，只执行一次，之后调用doGet()和doPost()方法</li>
<li>HttpServlet调用doGet()和doPost()的HttpServletRequest的有关方法获取http请求</li>
<li>HttpServlet调用doGet()和doPost()的HttpServletResponse的有关方法生成响应数据</li>
<li>web服务器将HttpServletResponse对象分解为http请求</li>
<li>浏览器接收http请求</li>
<li>destroy()方法也只调用一次，当reload，关闭tomcat或者关机等时</li>
</ul>
<h2 id="web-xml_u914D_u7F6E"><a href="#web-xml_u914D_u7F6E" class="headerlink" title="web.xml配置"></a><strong>web.xml配置</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Servlet名字<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>此servlet全路径<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>vision<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>1.0<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Servlet名字<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/Servlet名字<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-_u81EA_u52A8_u521D_u59CB_u5316"><a href="#1-_u81EA_u52A8_u521D_u59CB_u5316" class="headerlink" title="1.自动初始化"></a>1.自动初始化</h3><p>当配置中无<code>&lt;load-on-startup&gt;&lt;/load-on-startup&gt;</code>时，只有第一次访问此servlet时才会实例化并调用init()方法，当配置了<code>&lt;load-on-startup&gt;&lt;/load-on-startup&gt;</code>后，只要开启web服务器就会调用init()方法，设置的整数值越大，表示优先级越大。<br>相关代码请参考：<br><strong><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/MyInitServlet1.java" target="_blank" rel="external">Github地址: init初始化代码</a></strong><br><strong><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/model/SendEmailThread.java" target="_blank" rel="external">Github地址: 发邮件代码</a></strong>  </p>
<h3 id="2-_u8BFB_u53D6_u521D_u59CB_u5316_u53C2_u6570"><a href="#2-_u8BFB_u53D6_u521D_u59CB_u5316_u53C2_u6570" class="headerlink" title="2.读取初始化参数"></a>2.读取初始化参数</h3><p>读取特定名字的参数：<br><code>this.getServletConfig().getInitParameter(&quot;名字&quot;)</code><br>获取所有参数名字：<br><code>this.getServletConfig().getInitParameterNames()</code><br>相关代码请参考：<br><strong><a href="https://github.com/bupthuangxin/Servlet-studyDemo/blob/master/servletProject/src/com/hsp/servlet/ServletConfigTest.java" target="_blank" rel="external">Github地址: 读取初始化参数</a></strong>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Servlet_u5DE5_u4F5C_u539F_u7406"><a href="#Servlet_u5DE5_u4F5C_u539F_u7406" class="headerlink" title="Servlet工作原理"></a><strong>Servl]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git总结]]></title>
    <link href="http://yoursite.com/2016/02/06/git%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/02/06/git总结/</id>
    <published>2016-02-06T10:16:52.000Z</published>
    <updated>2016-03-13T12:43:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Linux_u4E0B_u5B89_u88C5git"><a href="#Linux_u4E0B_u5B89_u88C5git" class="headerlink" title="Linux下安装git"></a>Linux下安装git</h3><p><code>sudo apt-get install git</code>或者<code>sudo apt-get install git-core</code></p>
<h3 id="Mac_OS_X_u4E0B_u5B89_u88C5git"><a href="#Mac_OS_X_u4E0B_u5B89_u88C5git" class="headerlink" title="Mac OS X下安装git"></a>Mac OS X下安装git</h3><p>首次需要安装<code>homebrew</code>，它的命令是：<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br>然后用<code>homebrew</code>安装<code>git</code>，命令是：<code>brew install git</code>,安装后输入<code>git --version</code>查看<code>git</code>安装是否成功，我的电脑显示<code>git version 2.7.0</code></p>
<h3 id="Windows_u4E0B_u5B89_u88C5git"><a href="#Windows_u4E0B_u5B89_u88C5git" class="headerlink" title="Windows下安装git"></a>Windows下安装git</h3><p>Linux或Mac大法好，赶紧换系统吧亲。  </p>
<p>安装完后需要设置:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="git_u547D_u4EE4"><a href="#git_u547D_u4EE4" class="headerlink" title="git命令"></a>git命令</h1><hr>
<p>以下只做命令总结，方便自己用到时能快速查询，学习<code>git</code>请点传送门：<br><strong><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程传送门</a></strong><br>建立仓库：<br><code>git init</code><br>把文件从工作区加到暂存区：<br><code>git add [filename]</code><br>文件提交到仓库：<br><code>git commit -m &quot;balabala&quot;</code><br>查看当前仓库状态：<br><code>git status</code><br>仓库状态为文件修改过，查看上一次修改情况：<br><code>git diff [filename]</code><br>查看提交历史：<br><code>git log</code><br>简化日志内容：<br><code>git log --pretty=oneline</code><br>回到上一版本：<br><code>git reset --hard HEAD^</code><br>回到上上一版本：<br><code>git reset --hard HEAD^^</code><br>回到前100版本：<br><code>git reset --hard HEAD~100</code><br>去到未来版本，commit_id为未来版本号：<br><code>git reset --hard [commit_id]</code><br>查看命令历史，包含commit_id等信息：<br><code>git reflog</code><br>查看工作区和版本库最新版本的区别：<br><code>git diff HEAD -- [filename]</code><br>丢弃工作区的修改回到和版本库一样；撤回修改到添加暂存区后状态：<br><code>git checkout -- [filename]</code><br>暂存区的修改撤销掉，重新放回工作区。再用上一条丢弃工作区修改：<br><code>git reset HEAD [filename]</code><br>从版本库中删除该文件并<code>git commit</code>：<br><code>git rm  [filename]</code><br>本地关联github远程库：<br><code>git remote add origin git@github.com:bupthuangxin/仓库名.git</code><br>本地库所有内容推送到远程库：<br><code>git push -u origin master</code><br>远程库克隆本地库：<br><code>git clone git@github.com:bupthuangxin/仓库名.git</code><br>创建dev分支并切换至dev：<br><code>git checkout -b dev</code><br>创建dev分支：<br><code>git branch dev</code><br>切换至dev分支：<br><code>git checkout dev</code><br>查看当前分支：<br><code>git branch</code><br>在master分支时，合并两分支，Fast-forward方式：<br><code>git merge dev</code><br>删除dev分支：<br><code>git branch -d dev</code><br>查看分支合并图：<br><code>git log --graph --pretty=oneline --abbrev-commit</code><br>禁用Fast-forward方式进行合并：<br><code>git merge --no-ff -m &quot;balabala&quot; dev</code><br>储藏当前分支的工作现场：<br><code>git stash</code><br>查看当前分支工作现场：<br><code>git stash list</code><br>恢复工作：<br><code>git stash apply</code><br>删除stash内容：<br><code>git stash drop</code><br>恢复并删除stash内容：<br><code>git stash pop</code><br>强行删除分支（分支还没合并）：<br><code>git branch -D dev</code><br>查看远程库信息：<br><code>git remote -v</code><br>此分支推送远程库：<br><code>git push origin [分支名]</code><br>克隆远程库只能看见master分支，切换到dev分支：<br><code>git checkout -b dev origin/dev</code><br>推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并：<br><code>git pull</code><br>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建：<br><code>git branch --set-upstream branch-name origin/branch-name</code><br>给当前版本打标签：<br><code>git tag [标签名]</code><br>查看所有标签：<br><code>git tag</code><br>给之前的版本打标签：<br><code>git tag [标签名] [commit_id]</code><br>查看标签信息：<br><code>git show [标签名]</code><br>用-a指定标签名，-m指定说明文字：<br><code>git tag -a [标签名] -m &quot;balabala&quot; [commit_id]</code><br>删除标签：<br><code>git tag -d [标签名]</code><br>推送标签到远程：<br><code>git push origin [标签名]</code><br>推送全部尚未推送到远程的本地标签：<br><code>git push origin --tags</code><br>删除远程标签：<br><code>git push origin :refs/tags/[标签名]</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Linux_u4E0B_u5B89_u88C5git"><a href="#Linux_u4E0B_u5B89_u88C5git" class="headerlink" title="Linux下安装git"></a>Linux下安装git</h3><p><cod]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[request和response中文乱码]]></title>
    <link href="http://yoursite.com/2016/02/03/request%E5%92%8Cresponse%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>http://yoursite.com/2016/02/03/request和response中文乱码/</id>
    <published>2016-02-03T10:27:41.000Z</published>
    <updated>2016-02-06T10:14:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="request_u548Cresponse_u4E2D_u6587_u4E71_u7801_u53CA_u89E3_u51B3_u65B9_u6CD5"><a href="#request_u548Cresponse_u4E2D_u6587_u4E71_u7801_u53CA_u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="request和response中文乱码及解决方法"></a>request和response中文乱码及解决方法</h2><p><strong><em>request乱码指的是</em></strong>：浏览器向服务器发送的请求参数中包含中文字符，服务器获取到的请求参数的值是乱码；<br><strong><em>response乱码指的是</em></strong>：服务器向浏览器发送的数据包含中文字符，浏览器中显示的是乱码; </p>
<p><strong><em>乱码产生的原因</em></strong>：不管是request乱码还是response乱码，其实都是由于浏览器跟服务器端采用的编码格式不一致造成的。以request乱码为例：浏览器向服务器发送请求，因为浏览器与服务器之间的通信实质上是socket流，所以要先将请求参数（字符）转换成字节(编码过程)，服务器接收到请求参数后进行解码（字节转字符），然后封装到request对象中。如果客户端的编码与服务器端的解码不统一，就会导致通过request获取到的请求参数的值是乱码。  </p>
<h3 id="response_u4E71_u7801"><a href="#response_u4E71_u7801" class="headerlink" title="response乱码"></a>response乱码</h3><p>服务器发给浏览器的数据默认是按照ISO-8859-1编码，浏览器接收到数据后按照默认的字符集进行解码后显示，如果浏览器的默认解码字符集不是ISO-8859-1，就出现乱码。对于response乱码，只需要在服务器端指定一个编码字符集，然后通知浏览器按照这个字符集进行解码就可以了。<br><strong>1.A设置服务器端的编码</strong><br><code>response.setCharacterEncoding(&quot;utf-8&quot;);</code>该方法必须在<code>response.getWriter()</code>之前进行设置。<br><strong>B通知浏览器服务器发送的数据格式</strong><br><code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code>等价于<br><code>response.setHeader(&quot;contentType&quot;, &quot;text/html; charset=utf-8&quot;);</code><br><strong>C浏览器使用utf-8进行解码</strong><br><strong>2.当用到<code>response.sendRedirect(&quot;____?name=&quot;+u)</code>转向时</strong>，u一定要为iso-8859-1编码方式，否则容易出现乱码。将utf-8编码的中文转为iso-8859-1编码：<br><code>String u=new String(uu.getBytes(&quot;utf-8&quot;),&quot;iso-8859-1&quot;);//uu为utf-8编码的中文</code><br>中文u的值传入到转向的servlet，iso-8859-1自动转为utf-8编码，若无自动转换，用上述转换代码进行转换。  </p>
<h3 id="request_u4E71_u7801"><a href="#request_u4E71_u7801" class="headerlink" title="request乱码"></a>request乱码</h3><p>从浏览器发起的访问方式有三种：在地址栏直接输入URL访问、点击页面中的超链接访问、提交表单访问。第一种访问方式浏览器默认将参数按照utf-8进行编码，后面两种访问方式浏览器将参数按照当前页面的显示编码进行编码。所以对于request乱码，只需要在服务器端设置相应的解码格式即可。由于访问方式不同，浏览器对参数的编码格式也不同，为了方便处理，通过超链接和表单的访问也规定必须是utf-8格式，即显示当前页面的编码也要使用utf-8，这样浏览器将统一使用utf-8对参数进行编码。<br><strong>1.post方式属于表单提交，参数存在于请求体中。</strong><br><code>request.setCharacterEncoding(&quot;utf-8&quot;)</code><br><strong>2.get方式属于表单提交，参数存在URL中，服务器按照默认的iso-8859-1进行解码</strong><br><code>String u=new String(request.getParameter(&quot;&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;)</code><br><strong>3.超链接访问中有中文参数时</strong>，可以修改服务器端对URL参数的默认编码。在tomcat的server.xml中，设置元素的属性URIEncoding=”UTF-8”即可。以上只要涉及URL中有中文都可试着用此方法解决。  </p>
<h3 id="u5229_u7528_u8FC7_u6EE4_u5668_u89E3_u51B3_u4E71_u7801_u95EE_u9898_uFF1A"><a href="#u5229_u7528_u8FC7_u6EE4_u5668_u89E3_u51B3_u4E71_u7801_u95EE_u9898_uFF1A" class="headerlink" title="利用过滤器解决乱码问题："></a>利用过滤器解决乱码问题：</h3><p>在Filter的<code>init</code>方法中获取<code>web.xml</code>的filter编码设置：<br><code>String charEncoding=fConfig.getInitParameter(&quot;encoding&quot;);</code><br>在Filter的<code>doFilter</code>方法中设置：  </p>
<pre><code class="java"><span class="comment">//当前应用的默认编码与请求的编码值不相同，执行</span>
<span class="keyword">if</span>(!charEncoding.equal(request.getCharacterEncoding())){
    request.getCharacterEncoding(charEncoding)；
}
response.getCharacterEncoding(charEncoding)；
</code></pre>
<p>web.xml配置<br><code>&lt;filter&gt;</code><br><code>&lt;init-param&gt;</code><br><code>&lt;param-name&gt;encoding&lt;/param-name&gt;</code><br><code>&lt;param-value&gt;UTF-8&lt;/param-value&gt;</code><br><code>&lt;/init-param&gt;</code><br><code>&lt;/filter&gt;</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="request_u548Cresponse_u4E2D_u6587_u4E71_u7801_u53CA_u89E3_u51B3_u65B9_u6CD5"><a href="#request_u548Cresponse_u4E2D_u6587_u4E71_u7801]]>
    </summary>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/01/28/hello-world/"/>
    <id>http://yoursite.com/2016/01/28/hello-world/</id>
    <published>2016-01-27T16:44:31.000Z</published>
    <updated>2016-01-27T16:44:31.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
